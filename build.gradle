plugins {
    id 'java'
    id "io.qameta.allure" version "2.11.2"
    id "nu.studer.credentials" version "2.2"
    id "org.gradle.test-retry" version "1.2.1"
    id 'ru.vyarus.quality' version '4.6.0'
}

subprojects {
    def gradleDir = "$rootDir/gradle"

    apply plugin: 'java'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'nu.studer.credentials'
    apply plugin: 'org.gradle.test-retry'
    apply plugin: 'ru.vyarus.quality'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
        def token = credentials.GitHubPackageRegistry ?: System.getenv("GITHUB_TOKEN")
        maven {
            url 'https://maven.pkg.github.com/KazanExpress/ke-test-commons'
            credentials {
                username 'GitHubActor'
                password token
            }
        }
        mavenLocal()
    }

    allure {
        version.set("2.17.2")
        adapter {
            adapter.autoconfigure.set(true)
            adapter.aspectjWeaver.set(true)
            frameworks {
                junit5 {
                    adapterVersion.set("2.17.2")
                }
            }
        }
    }

    quality.sourceSets = [sourceSets.main, sourceSets.test]
    quality {
        configDir = "$gradleDir/quality-configs"
        excludeSources = fileTree("build/generated-sources")
        exclude("**/*.json")

        checkstyleVersion = "8.36.1"
        codenarcVersion = "1.6"
        pmdVersion = "6.28.0"
        spotbugsVersion = "4.1.2"

        checkstyle = true
        codenarc = true
        pmd = true
        spotbugs = false

        htmlReports = false
    }

    dependencies {
        implementation 'com.codeborne:selenide:6.12.0'
        testImplementation 'com.codeborne:selenide-proxy:6.12.0'
        implementation 'com.browserup:browserup-proxy-core:2.1.2'
        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.0'

        implementation 'org.aeonbits.owner:owner:1.0.12'
        implementation 'org.assertj:assertj-core:3.23.1'

        implementation 'io.qameta.allure:allure-java-commons:2.20.0'

        implementation('ru.kazanexpress.tests:ke-test-commons:1.3.+') {
            exclude group: 'org.junit'
            exclude group: 'org.junit.jupiter'
            exclude group: 'org.junit.platform'
        }
        implementation('io.perfeccionista.framework:environment-junit5:0.2.0-Beta') {
            exclude group: 'org.junit'
            exclude group: 'org.junit.jupiter'
            exclude group: 'org.junit.platform'
        }
        implementation 'org.apache.commons:commons-csv:1.9.0'

        implementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
        implementation 'org.junit.platform:junit-platform-engine:1.9.0'

        implementation 'com.jayway.jsonpath:json-path:2.7.0'
        implementation 'com.googlecode.json-simple:json-simple:1.1.1'

        implementation 'ru.yandex.qatools.ashot:ashot:1.5.4'
        implementation 'commons-codec:commons-codec:1.15'
        implementation 'commons-io:commons-io:2.11.0'
    }

    test {
        ignoreFailures = true

        useJUnitPlatform()

        systemProperties(System.getProperties())

        systemProperty("junit.jupiter.execution.parallel.enabled", "true")
        systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")
        systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "concurrent")
        systemProperty("junit.jupiter.execution.parallel.config.strategy", "custom")
        systemProperty("junit.jupiter.execution.parallel.config.custom.class", "ru.kazanexpress.common.CustomStrategy")

        systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")

        retry {
            maxRetries = Integer.parseInt(System.getProperty("test.retry.count", "0"))
        }
    }

}